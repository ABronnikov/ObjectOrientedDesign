package behavioral.strategy;

import java.util.*;

/**
 * При помощи паттерна "Стратегия" мы можем внутри объекта хранить то,
 * каким образом мы будем выполнять действие, т.е. объект внутри хранит стратегию,
 * которая может быть изменена в том числе во врем выполнения кода.
 *
 * Этот паттерн мы часто используем, когда применяем компаратор.
 *
 * Перед нами — TreeSet. У него есть поведение — TreeSet поддерживает порядок элементов,
 * т.е. сортирует их (т.к. он является SortedSet).
 *
 * У этого поведения есть стратегия, определённая по умолчанию,
 * которую мы видим в JavaDoc: сортировка в "natural ordering"
 * (для строк это лексикографический порядок).
 * Так происходит, если использовать конструктор без параметров.
 *
 * Но если мы захотим поменять стратегию, то мы можем передать
 * в конструктор Comparator. В данном примере мы можем создать
 * наш набор как new TreeSet(comparator), и тогда порядок
 * хранения элементов (стратегия хранения) поменяется на тот,
 * который указан в компараторе.
 *
 * Есть почти такой же паттерн с названием "Состояние" (State).
 * Паттерн "Состояние" говорит, что если у нас есть у главного
 * объекта некоторое поведение, зависимое от состояние этого объекта,
 * то тогда можно описать само состояние в виде объекта и менять объект состояния.
 * А вызовы из главного объекта делегировать состоянию. (Добавить пример)
 *
 */

class Main {

    public static void main(String[] args) {
        List<String> data = Arrays.asList("Moscow", "Paris", "NYC");
        Comparator<String> comparator = Comparator.comparingInt(String::length);
        Set dataSet = new TreeSet(comparator);
        dataSet.addAll(data);
        System.out.println("Dataset : " + dataSet);
    }
}
